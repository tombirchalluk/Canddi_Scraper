function Postcodes(knwl) {

	this.languages = {
    	'english': true,
  	};

  	var regexFirstHalf = /^[A-Z]{1,2}[0-9][0-9A-Z]?$/;	// Regex for the first half of the postcode
  	var regexSecondHalf = /^[0-9][A-Z]{2}/;				// Regex for the second half of the postcode

  	this.calls = function() {

        var arrResults = [];
        var strWords = knwl.words.get('linkWordsCasesensitive'); 
        var strCurrWord = null;

        for (var i = 0; i < strWords.length; i++) {

        	strCurrWord = knwl.tasks.removeCharacters(["-", "(", ")", ",","."], strWords[i]);	// Remove common punctuation.

        	if(regexSecondHalf.test(strCurrWord)) {	// if the regex matches the current word we're viewing

        		if(i > 0 && strCurrWord.length === 2 || strCurrWord.length === 3) {	// if the postcode has either 2 or 3 characters e.g. M1, or M12
        			
        			var strFirst = knwl.tasks.removeCharacters(["-", "(", ")", ",","."], strWords[i - 1]);	// Get the previous word which would be the first part of the postcode

        			if(regexFirstHalf.test(strFirst)) {	// if the regex matches the current word we're viewing

        				strCurrWord = strFirst +  " " + strCurrWord;  // add both the strings to make the full postcode and append a space in between.
        			}

                        var postcodeObj = {
                        	postcodes: strCurrWord	// add the postcode to the object
                        };

                        arrResults.push(postcodeObj);	// push the results.
	        	}
	        }  
	    } 
	       
        return arrResults;
    };  

    var objPostcodes = this;  

};

module.exports = Postcodes;